---
name: Terraform Apply

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  notice:
    runs-on: ubuntu-20.04

    steps:
      - name: Inform on PR that Apply is running
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            :hourglass: **Terraform Apply will start shortly**
            The results will be posted here.

  plan_and_apply:
    name: Plan and Apply
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        path:
          - dev/apps/example-alb-ec2-ebs
          - prod/foundation/terraform
          - prod/foundation/github-oidc

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Get Terraform version
        run: echo "::set-output name=version::$(cat .terraform-version)"
        id: terraform_version
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.terraform_version.outputs.version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        run: |
          cd envs/${{ matrix.path }}
          terraform init -input=false          

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd envs/${{ matrix.path }}
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan          

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo "${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}" \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt          

      - name: Put Plan in Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Inform on PR that Apply is starting
        if: ${{ !contains(env.PLAN, 'No changes.') }} 
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            :construction: **Starting ${{ matrix.path }}**
            Results will be displayed here shortly...

      - name: Apply Terraform
        if: ${{ steps.plan.outcome == 'success' && !contains(env.PLAN, 'No changes.') }} 
        id: apply
        continue-on-error: true
        run: |
          cd envs/${{ matrix.path }}
          terraform apply \
            -input=false \
            -no-color \
            tfplan          

      - name: Post Plan and Apply to GitHub PR
        if: ${{ steps.plan.outcome == 'success' && steps.apply.outcome == 'success' && !contains(env.PLAN, 'No changes.') }} 
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Apply completed for **${{ matrix.path }}**:

            <details>
            <summary>Click for detailed plan :blue_book:</summary>
          
            ### ${{ matrix.path }} plan
            ```diff
            ${{ env.PLAN }}
            ```
            </details>

            ```
            ${{ steps.apply.outputs.stdout }}
            ```            

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            :stop_sign: Plan failed for **${{ matrix.path }}**:

            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            :stop_sign: Apply failed for **${{ matrix.path }}**:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```
